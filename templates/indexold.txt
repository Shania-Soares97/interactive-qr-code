<!DOCTYPE html>
<html>
<head>
    <title>Monument Info</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; max-width: 700px; margin: auto; }
        button { margin: 3px; padding: 6px 12px; }
        #chat-box { border: 1px solid #ccc; padding: 10px; max-height: 200px; overflow-y: auto; background: #f9f9f9; }
        #chat-input { width: 70%; padding: 6px; }
    </style>
</head>
<body>
    <h2>Monument Description</h2>

    {% if translated %}
        <p id="text">{{ translated }}</p>
    {% else %}
        <p>No description available.</p>
    {% endif %}

    <!-- Language Selection Buttons -->
    <form method="POST">
        <p>Select Language:</p>
        <button type="submit" name="language" value="en">English</button>
        <button type="submit" name="language" value="fr">French</button>
        <button type="submit" name="language" value="hi">Hindi</button>
        <button type="submit" name="language" value="es">Spanish</button>
    </form>

    <!-- Audio Playback -->
    {% if audio %}
        <h4>Audio Playback:</h4>
        <audio controls autoplay>
            <source src="{{ audio }}" type="audio/mpeg">
            Your browser does not support audio playback.
        </audio>
    {% endif %}

    <!-- Chatbot Section -->
    <hr>
    <h3>Ask the Chatbot</h3>
    <div id="chat-box" style="border:1px solid #ccc; padding:10px; max-height:200px; overflow-y:auto;"></div>

    <div style="margin-top:10px;">
    <input type="text" id="chat-input" placeholder="Type your question..." style="width:65%;">
    <button onclick="sendMessage()">Send</button>
    <button id="toggle-voice" onclick="toggleVoice()">üîä Voice On</button>
    </div>

    <script>
        const preferredVoices = {
            "en-US": "Google US English",   // or "Microsoft David" or "Samantha"
            "fr-FR": "Google fran√ßais",     // or "Thomas" or "Am√©lie"
            "hi-IN": "Google ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",        // or "Microsoft Heera"
            "es-ES": "Google espa√±ol"       // or "Pablo" or "Conchita"
        };
        
        let voiceEnabled = true;
        let availableVoices = [];
    
        function loadVoices() {
            availableVoices = speechSynthesis.getVoices();
        }
    
        speechSynthesis.onvoiceschanged = loadVoices;
        loadVoices();
    
        function toggleVoice() {
            voiceEnabled = !voiceEnabled;
    
            // Stop current voice immediately when toggled off
            if (!voiceEnabled && speechSynthesis.speaking) {
                speechSynthesis.cancel();
            }
    
            document.getElementById("toggle-voice").innerText = voiceEnabled ? "üîä Voice On" : "üîá Voice Off";
        }
    
        const input = document.getElementById("chat-input");
        input.focus();
    
        input.addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });
    
        function sendMessage() {
            const message = input.value.trim();
            if (!message) return;
    
            const chatBox = document.getElementById("chat-box");
            chatBox.innerHTML += `<p><strong>You:</strong> ${message}</p>`;
            input.value = "";
    
            fetch("/chat", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ message: message })
            })
            .then(res => {
                if (!res.ok) throw new Error("Server error " + res.status);
                return res.json();
            })
            .then(data => {
                const reply = data.reply || data.error || "No response.";
                chatBox.innerHTML += `<p><strong>Bot:</strong> ${reply}</p>`;
                chatBox.scrollTop = chatBox.scrollHeight;
    
                // Stop any previous voice before speaking again
                speechSynthesis.cancel();
    
                if (voiceEnabled && 'speechSynthesis' in window) {
                    const utterance = new SpeechSynthesisUtterance(reply);
                    const lang = detectLanguage(reply);
                    utterance.lang = lang;
    
                    const voice = getVoiceForLang(lang);
                    if (voice) {
                        utterance.voice = voice;
                    }
    
                    speechSynthesis.speak(utterance);
                }
            })
            .catch(err => {
                chatBox.innerHTML += `<p style="color:red;"><strong>Error:</strong> ${err.message}</p>`;
            });
        }
    
        function getVoiceForLang(langCode) {
            const preferredName = preferredVoices[langCode];
            if (preferredName) {
                const voiceByName = availableVoices.find(v => v.name === preferredName);
                if (voiceByName) return voiceByName;
            }
        
            // Fallback: match by language code
            return availableVoices.find(voice => voice.lang === langCode) ||
                   availableVoices.find(voice => voice.lang.startsWith(langCode.split('-')[0])) ||
                   null;
        }
        
    
        function detectLanguage(text) {
            if (/[\u0900-\u097F]/.test(text)) return 'hi-IN'; // Hindi
            if (/[√°√©√≠√≥√∫√±√º¬ø¬°]/i.test(text)) return 'es-ES';     // Spanish
            if (/[√†√¢√ß√©√®√™√´√Æ√Ø√¥√ª√π√º√ø≈ì√¶]/i.test(text)) return 'fr-FR'; // French
            return 'en-US'; // Default to English
        }
    </script>
       
</body>
</html>
